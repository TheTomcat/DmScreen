/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */


export interface paths {
  "/health": {
    /** Health */
    get: operations["health"];
  };
  "/endpoints": {
    /** Endpoints */
    get: operations["endpoints"];
  };
  "/entity/": {
    /**
     * List Entities
     * @description Get all entities
     */
    get: operations["list_entities"];
    /**
     * Create Entity
     * @description Create a new entity
     */
    post: operations["create_entity"];
  };
  "/entity/sources": {
    /** Get Entity Sources */
    get: operations["get_entity_sources"];
  };
  "/entity/{entity_id}": {
    /**
     * Get Entity
     * @description Get a single entity by id
     */
    get: operations["get_entity"];
    /** Delete Entity */
    delete: operations["delete_entity"];
    /** Update Entity */
    patch: operations["update_entity"];
  };
  "/entity/json": {
    /**
     * Create Entity From Json
     * @description Create a new entity
     */
    post: operations["create_entity_from_json"];
  };
  "/participant/": {
    /**
     * List Participants
     * @description Get all participants
     */
    get: operations["list_participants"];
    /**
     * Create Participant
     * @description Create a new participant
     */
    post: operations["create_participant"];
  };
  "/participant/{participant_id}": {
    /**
     * Get Participant
     * @description Get a single participant by id
     */
    get: operations["get_participant"];
    /** Delete Participant */
    delete: operations["delete_participant"];
    /** Update Participant */
    patch: operations["update_participant"];
  };
  "/combat/": {
    /**
     * List Combats
     * @description Get all combats
     */
    get: operations["list_combats"];
    /**
     * Create Combat
     * @description Create a new combat
     */
    post: operations["create_combat"];
  };
  "/combat/{combat_id}": {
    /**
     * Get Combat
     * @description Get a single combat by id
     */
    get: operations["get_combat"];
    /** Delete Combat */
    delete: operations["delete_combat"];
    /** Update Combat */
    patch: operations["update_combat"];
  };
  "/combat/{combat_id}/add": {
    /** Add Participant To Combat */
    patch: operations["add_participant_to_combat"];
  };
  "/combat/{combat_id}/remove": {
    /** Remove Participant From Combat */
    delete: operations["remove_participant_from_combat"];
  };
  "/rolltable/": {
    /**
     * List Rolltables
     * @description Get all rolltables
     */
    get: operations["list_rolltables"];
    /**
     * Create Rolltable
     * @description Create a new rolltable
     */
    post: operations["create_rolltable"];
  };
  "/rolltable/{rolltable_id}": {
    /**
     * Get Rolltable
     * @description Get a single rolltable by id
     */
    get: operations["get_rolltable"];
    /** Delete Rolltable */
    delete: operations["delete_rolltable"];
    /** Update Rolltable */
    patch: operations["update_rolltable"];
  };
  "/message/": {
    /**
     * List Messages
     * @description Get all messages
     */
    get: operations["list_messages"];
    /**
     * Create Message
     * @description Create a new message
     */
    post: operations["create_message"];
  };
  "/message/random/": {
    /**
     * Get Random Messages
     * @description Get all messages
     */
    get: operations["get_random_messages"];
  };
  "/message/{message_id}": {
    /**
     * Get Message
     * @description Get a single message by id
     */
    get: operations["get_message"];
    /** Delete Message */
    delete: operations["delete_message"];
    /** Update Message */
    patch: operations["update_message"];
  };
  "/image/": {
    /**
     * List Images
     * @description Get all images
     */
    get: operations["list_images"];
    /**
     * Create Image
     * @description Create a new image
     */
    post: operations["create_image"];
  };
  "/image/tag": {
    /** Get Image Tag Matches */
    get: operations["get_image_tag_matches"];
  };
  "/image/random": {
    /**
     * Get Random Image
     * @description Get a single random image
     */
    get: operations["get_random_image"];
  };
  "/image/{image_id}": {
    /**
     * Get Image
     * @description Get a single image by id
     */
    get: operations["get_image"];
    /** Delete Image */
    delete: operations["delete_image"];
    /** Update Image */
    patch: operations["update_image"];
  };
  "/image/upload": {
    /** Upload Image */
    post: operations["upload_image"];
  };
  "/image/{image_id}/tag": {
    /** Set Tags */
    put: operations["set_tags"];
    /** Remove Tag */
    delete: operations["remove_tag"];
    /** Apply Tag */
    patch: operations["apply_tag"];
  };
  "/image/{image_id}/full": {
    /** Get Full Image */
    get: operations["get_full_image"];
  };
  "/image/{image_id}/thumb": {
    /** Get Image Thumbnail */
    get: operations["get_image_thumbnail"];
  };
  "/image/{image_id}/b64": {
    /** Get Image As Base64 */
    get: operations["get_image_as_base64"];
  };
  "/image/{image_id}/collection": {
    /** Remove From Collection */
    delete: operations["remove_from_collection"];
    /** Add To Collection */
    patch: operations["add_to_collection"];
  };
  "/tag/": {
    /**
     * List Tags
     * @description Get all tags
     */
    get: operations["list_tags"];
    /**
     * Create Tag
     * @description Create a new tag
     */
    post: operations["create_tag"];
  };
  "/tag/orphans": {
    /** Get Orphan Tags */
    get: operations["get_orphan_tags"];
  };
  "/tag/{tag_id}": {
    /**
     * Get Tag
     * @description Get a single tag by id
     */
    get: operations["get_tag"];
    /** Delete Tag */
    delete: operations["delete_tag"];
    /** Update Tag */
    patch: operations["update_tag"];
  };
  "/tag/{tag_id}/merge/{tag2_id}": {
    /** Merge Tags */
    put: operations["merge_tags"];
  };
  "/collection/": {
    /**
     * List Collections
     * @description Get all collections
     */
    get: operations["list_collections"];
    /**
     * Create Collection
     * @description Create a new collection
     */
    post: operations["create_collection"];
  };
  "/collection/orphans": {
    /** Get Empty Collections */
    get: operations["get_empty_collections"];
  };
  "/collection/{collection_id}": {
    /**
     * Get Collection
     * @description Get a single collection by id
     */
    get: operations["get_collection"];
    /** Delete Collection */
    delete: operations["delete_collection"];
    /** Update Collection */
    patch: operations["update_collection"];
  };
  "/live/": {
    /** Index */
    get: operations["index"];
  };
}

export type webhooks = Record<string, never>;

export interface components {
  schemas: {
    /** Body_create_entity_from_json */
    Body_create_entity_from_json: {
      /**
       * Entity File
       * Format: binary
       */
      entity_file: string;
    };
    /** Body_upload_image */
    Body_upload_image: {
      /**
       * Image File
       * Format: binary
       */
      image_file: string;
    };
    /**
     * Collection
     * @description Properties to return to client
     */
    Collection: {
      /** Name */
      name: string;
      /** Collection Id */
      collection_id: number;
      /** Images */
      images: components["schemas"]["ImageURL"][];
    };
    /**
     * CollectionCreate
     * @description Properties to receive on item creation.
     */
    CollectionCreate: {
      /** Name */
      name: string;
    };
    /**
     * CollectionUpdate
     * @description Properties to receive on item update. Don't need id, as PUTting to /parents/{id}
     */
    CollectionUpdate: {
      /** Name */
      name: string;
    };
    /** Combat */
    Combat: {
      /** Title */
      title: string;
      /** Active Participant Id */
      active_participant_id?: number | null;
      /**
       * Is Active
       * @default false
       */
      is_active?: boolean;
      /** Combat Id */
      combat_id: number;
      /** Participants */
      participants: components["schemas"]["Participant"][];
      /** Round */
      round: number;
    };
    /** CombatCreate */
    CombatCreate: {
      /** Title */
      title: string;
      /** Active Participant Id */
      active_participant_id?: number | null;
      /**
       * Is Active
       * @default false
       */
      is_active?: boolean | null;
      /**
       * Participants
       * @default []
       */
      participants?: components["schemas"]["ParticipantCreate"][] | null;
    };
    /** CombatUpdate */
    CombatUpdate: {
      /** Title */
      title?: string | null;
      /** Active Participant Id */
      active_participant_id?: number | null;
      /** Is Active */
      is_active?: boolean | null;
      /** Participants */
      participants?: components["schemas"]["ParticipantUpdateID"][] | null;
      /**
       * Round
       * @default 0
       */
      round?: number | null;
    };
    /** Entity */
    Entity: {
      /**
       * Name
       * @default
       */
      name?: string;
      /** Image Id */
      image_id?: number | null;
      /**
       * Is Pc
       * @default false
       */
      is_PC?: boolean;
      /**
       * Hit Dice
       * @default
       */
      hit_dice?: string;
      /**
       * Ac
       * @default 10
       */
      ac?: number;
      /** Cr */
      cr?: number | null;
      /**
       * Initiative Modifier
       * @default 0
       */
      initiative_modifier?: number;
      /** Source */
      source?: string | null;
      /** Source Page */
      source_page?: number | null;
      /** Entity Id */
      entity_id: number;
      /** Data */
      data: string | null;
      /** Seq */
      seq?: string | null;
    };
    /** EntityByID */
    EntityByID: {
      /** Entity Id */
      entity_id: number;
    };
    /** EntityCreate */
    EntityCreate: {
      /**
       * Name
       * @default
       */
      name?: string;
      /** Image Id */
      image_id?: number | null;
      /**
       * Is Pc
       * @default false
       */
      is_PC?: boolean;
      /**
       * Hit Dice
       * @default
       */
      hit_dice?: string;
      /**
       * Ac
       * @default 10
       */
      ac?: number;
      /** Cr */
      cr?: number | null;
      /**
       * Initiative Modifier
       * @default 0
       */
      initiative_modifier?: number;
      /** Source */
      source?: string | null;
      /** Source Page */
      source_page?: number | null;
    };
    /** EntityUpdate */
    EntityUpdate: {
      /** Name */
      name?: string | null;
      /** Image Id */
      image_id?: number | null;
      /** Is Pc */
      is_PC?: boolean | null;
      /** Hit Dice */
      hit_dice?: string | null;
      /** Ac */
      ac?: number | null;
      /** Cr */
      cr?: number | null;
      /** Initiative Modifier */
      initiative_modifier?: number | null;
      /** Source */
      source?: string | null;
      /** Source Page */
      source_page?: number | null;
    };
    /** HTTPValidationError */
    HTTPValidationError: {
      /** Detail */
      detail?: components["schemas"]["ValidationError"][];
    };
    /** Image */
    Image: {
      /** Name */
      name: string;
      /** Focus X */
      focus_x?: number | null;
      /** Focus Y */
      focus_y?: number | null;
      /** Hash */
      hash: string | null;
      /** Dimension X */
      dimension_x: number;
      /** Dimension Y */
      dimension_y: number;
      type?: components["schemas"]["ImageType"] | null;
      /** Image Id */
      image_id: number;
      /** Tags */
      tags: components["schemas"]["Tag"][];
      /**
       * Palette
       * @default
       */
      palette?: string | null;
      /**
       * Entities
       * @default []
       */
      entities?: components["schemas"]["EntityByID"][];
      /** Seq */
      seq?: string | null;
    };
    /** ImageB64 */
    ImageB64: {
      /** Name */
      name: string;
      /** Focus X */
      focus_x?: number | null;
      /** Focus Y */
      focus_y?: number | null;
      /** Hash */
      hash: string | null;
      /** Dimension X */
      dimension_x: number;
      /** Dimension Y */
      dimension_y: number;
      type?: components["schemas"]["ImageType"] | null;
      /** Image Id */
      image_id: number;
      /** Tags */
      tags: components["schemas"]["Tag"][];
      /**
       * Palette
       * @default
       */
      palette?: string | null;
      /**
       * Entities
       * @default []
       */
      entities?: components["schemas"]["EntityByID"][];
      /** Seq */
      seq?: string | null;
      /** B64 */
      b64: string | null;
    };
    /**
     * ImageCreate
     * @description Properties to receive on item creation.
     */
    ImageCreate: {
      /** Name */
      name: string;
      /** Focus X */
      focus_x?: number | null;
      /** Focus Y */
      focus_y?: number | null;
      /** Hash */
      hash: string | null;
      /** Dimension X */
      dimension_x: number;
      /** Dimension Y */
      dimension_y: number;
      type?: components["schemas"]["ImageType"] | null;
    };
    /**
     * ImageType
     * @enum {string}
     */
    ImageType: "backdrop" | "character" | "handout" | "map";
    /** ImageURL */
    ImageURL: {
      /** Name */
      name: string;
      /** Focus X */
      focus_x?: number | null;
      /** Focus Y */
      focus_y?: number | null;
      /** Hash */
      hash: string | null;
      /** Dimension X */
      dimension_x: number;
      /** Dimension Y */
      dimension_y: number;
      type?: components["schemas"]["ImageType"] | null;
      /** Image Id */
      image_id: number;
      /** Tags */
      tags: components["schemas"]["Tag"][];
      /**
       * Palette
       * @default
       */
      palette?: string | null;
      /**
       * Entities
       * @default []
       */
      entities?: components["schemas"]["EntityByID"][];
      /** Seq */
      seq?: string | null;
      /** Url */
      url: string;
      /** Thumbnail Url */
      thumbnail_url: string;
    };
    /** ImageUpdate */
    ImageUpdate: {
      /** Name */
      name?: string | null;
      /** Focus X */
      focus_x?: number | null;
      /** Focus Y */
      focus_y?: number | null;
      /** Dimension X */
      dimension_x?: number | null;
      /** Dimension Y */
      dimension_y?: number | null;
      type?: components["schemas"]["ImageType"] | null;
    };
    /** Message */
    Message: {
      /** Message */
      message: string;
      /** Message Id */
      message_id: number;
    };
    /** MessageCreate */
    MessageCreate: {
      /**
       * Message
       * @default
       */
      message?: string;
    };
    /** MessageUpdate */
    MessageUpdate: {
      /**
       * Message
       * @default
       */
      message?: string;
    };
    /** Page[Collection] */
    Page_Collection_: {
      /** Items */
      items: components["schemas"]["Collection"][];
      /** Total */
      total: number | null;
      /** Page */
      page: number | null;
      /** Size */
      size: number | null;
      /** Pages */
      pages?: number | null;
    };
    /** Page[Combat] */
    Page_Combat_: {
      /** Items */
      items: components["schemas"]["Combat"][];
      /** Total */
      total: number | null;
      /** Page */
      page: number | null;
      /** Size */
      size: number | null;
      /** Pages */
      pages?: number | null;
    };
    /** Page[Entity] */
    Page_Entity_: {
      /** Items */
      items: components["schemas"]["Entity"][];
      /** Total */
      total: number | null;
      /** Page */
      page: number | null;
      /** Size */
      size: number | null;
      /** Pages */
      pages?: number | null;
    };
    /** Page[ImageURL] */
    Page_ImageURL_: {
      /** Items */
      items: components["schemas"]["ImageURL"][];
      /** Total */
      total: number | null;
      /** Page */
      page: number | null;
      /** Size */
      size: number | null;
      /** Pages */
      pages?: number | null;
    };
    /** Page[Message] */
    Page_Message_: {
      /** Items */
      items: components["schemas"]["Message"][];
      /** Total */
      total: number | null;
      /** Page */
      page: number | null;
      /** Size */
      size: number | null;
      /** Pages */
      pages?: number | null;
    };
    /** Page[Participant] */
    Page_Participant_: {
      /** Items */
      items: components["schemas"]["Participant"][];
      /** Total */
      total: number | null;
      /** Page */
      page: number | null;
      /** Size */
      size: number | null;
      /** Pages */
      pages?: number | null;
    };
    /** Page[RollTable] */
    Page_RollTable_: {
      /** Items */
      items: components["schemas"]["RollTable"][];
      /** Total */
      total: number | null;
      /** Page */
      page: number | null;
      /** Size */
      size: number | null;
      /** Pages */
      pages?: number | null;
    };
    /** Page[Tag] */
    Page_Tag_: {
      /** Items */
      items: components["schemas"]["Tag"][];
      /** Total */
      total: number | null;
      /** Page */
      page: number | null;
      /** Size */
      size: number | null;
      /** Pages */
      pages?: number | null;
    };
    /** Participant */
    Participant: {
      /** Name */
      name: string;
      /** Participant Id */
      participant_id: number;
      /** Combat Id */
      combat_id: number;
      /** Entity Id */
      entity_id: number | null;
      /** Image Id */
      image_id: number | null;
      /** Is Visible */
      is_visible: boolean;
      /** Is Pc */
      is_PC: boolean;
      /** Damage */
      damage: number;
      /** Max Hp */
      max_hp?: number | null;
      /** Hit Dice */
      hit_dice: string | null;
      /** Ac */
      ac: number;
      /** Initiative */
      initiative?: number | null;
      /** Initiative Modifier */
      initiative_modifier: number;
      /** Conditions */
      conditions: string;
      /** Has Reaction */
      has_reaction: boolean;
      /** Colour */
      colour: string | null;
    };
    /** ParticipantCreate */
    ParticipantCreate: {
      /**
       * Name
       * @default
       */
      name?: string | null;
      /** Entity Id */
      entity_id?: number | null;
      /** Image Id */
      image_id?: number | null;
      /**
       * Is Visible
       * @default true
       */
      is_visible?: boolean;
      /**
       * Is Pc
       * @default false
       */
      is_PC?: boolean;
      /**
       * Damage
       * @default 0
       */
      damage?: number;
      /** Max Hp */
      max_hp?: number | null;
      /** Hit Dice */
      hit_dice?: string | null;
      /**
       * Ac
       * @default 10
       */
      ac?: number;
      /** Initiative */
      initiative?: number | null;
      /**
       * Initiative Modifier
       * @default 0
       */
      initiative_modifier?: number;
      /**
       * Conditions
       * @default
       */
      conditions?: string;
      /**
       * Has Reaction
       * @default true
       */
      has_reaction?: boolean;
      /**
       * Colour
       * @default
       */
      colour?: string | null;
    };
    /** ParticipantUpdate */
    ParticipantUpdate: {
      /** Name */
      name?: string | null;
      /** Entity Id */
      entity_id?: number | null;
      /** Image Id */
      image_id?: number | null;
      /** Is Visible */
      is_visible?: boolean | null;
      /** Is Pc */
      is_PC?: boolean | null;
      /** Damage */
      damage?: number | null;
      /** Max Hp */
      max_hp?: number | null;
      /** Hit Dice */
      hit_dice?: string | null;
      /** Ac */
      ac?: number | null;
      /** Initiative */
      initiative?: number | null;
      /** Initiative Modifier */
      initiative_modifier?: number | null;
      /** Conditions */
      conditions?: string | null;
      /** Has Reaction */
      has_reaction?: boolean | null;
      /** Colour */
      colour?: string | null;
    };
    /** ParticipantUpdateID */
    ParticipantUpdateID: {
      /** Name */
      name?: string | null;
      /** Entity Id */
      entity_id?: number | null;
      /** Image Id */
      image_id?: number | null;
      /** Is Visible */
      is_visible?: boolean | null;
      /** Is Pc */
      is_PC?: boolean | null;
      /** Damage */
      damage?: number | null;
      /** Max Hp */
      max_hp?: number | null;
      /** Hit Dice */
      hit_dice?: string | null;
      /** Ac */
      ac?: number | null;
      /** Initiative */
      initiative?: number | null;
      /** Initiative Modifier */
      initiative_modifier?: number | null;
      /** Conditions */
      conditions?: string | null;
      /** Has Reaction */
      has_reaction?: boolean | null;
      /** Colour */
      colour?: string | null;
      /** Participant Id */
      participant_id: number;
    };
    /** RollTable */
    RollTable: {
      /** Name */
      name: string;
      /** Rows */
      rows: components["schemas"]["RollTableRow"][];
      /** Rolltable Id */
      rolltable_id: number;
    };
    /** RollTableBase */
    RollTableBase: {
      /** Name */
      name: string;
      /** Rows */
      rows: components["schemas"]["RollTableRowBase"][];
    };
    /** RollTableRow */
    RollTableRow: {
      /** Name */
      name: string;
      /** Display Name */
      display_name: string;
      /**
       * Weight
       * @default 1
       */
      weight?: number;
      /** Category */
      category?: string | null;
      /** Extra Data */
      extra_data?: components["schemas"]["RollTableRowData"][] | null;
      /** Rolltable Row Id */
      rolltable_row_id: number;
    };
    /** RollTableRowBase */
    RollTableRowBase: {
      /** Name */
      name: string;
      /** Display Name */
      display_name: string;
      /**
       * Weight
       * @default 1
       */
      weight?: number;
      /** Category */
      category?: string | null;
      /** Extra Data */
      extra_data?: components["schemas"]["RollTableRowData"][] | null;
    };
    /** RollTableRowData */
    RollTableRowData: {
      /** Data */
      data: string;
    };
    /** RollTableRowUpdate */
    RollTableRowUpdate: {
      /** Name */
      name?: string | null;
      /** Display Name */
      display_name?: string | null;
      /** Weight */
      weight?: number | null;
      /** Category */
      category?: string | null;
      /** Extra Data */
      extra_data?: components["schemas"]["RollTableRowData"][] | null;
    };
    /** RollTableUpdate */
    RollTableUpdate: {
      /** Name */
      name?: string | null;
      /** Rows */
      rows?: components["schemas"]["RollTableRowUpdate"][] | null;
    };
    /**
     * SortOption
     * @enum {string}
     */
    SortOption: "desc" | "asc" | "none";
    /**
     * Tag
     * @description Properties to return to client
     */
    Tag: {
      /** Tag */
      tag: string;
      /** Tag Id */
      tag_id: number;
    };
    /**
     * TagCreate
     * @description Properties to receive on item creation.
     */
    TagCreate: {
      /** Tag */
      tag: string;
    };
    /**
     * TagUpdate
     * @description Properties to receive on item update. Don't need id, as PUTting to /parents/{id}
     */
    TagUpdate: {
      /** Tag */
      tag: string;
    };
    /** ValidationError */
    ValidationError: {
      /** Location */
      loc: (string | number)[];
      /** Message */
      msg: string;
      /** Error Type */
      type: string;
    };
  };
  responses: never;
  parameters: never;
  requestBodies: never;
  headers: never;
  pathItems: never;
}

export type $defs = Record<string, never>;

export type external = Record<string, never>;

export interface operations {

  /** Health */
  health: {
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": string;
        };
      };
    };
  };
  /** Endpoints */
  endpoints: {
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": unknown[];
        };
      };
    };
  };
  /**
   * List Entities
   * @description Get all entities
   */
  list_entities: {
    parameters: {
      query?: {
        name?: string | null;
        is_PC?: boolean | null;
        has_image?: boolean | null;
        has_data?: boolean | null;
        cr?: string | null;
        source?: string | null;
        sort_by?: "name" | "ac" | "cr" | "initiative" | "source" | "seq" | null;
        sort_dir?: components["schemas"]["SortOption"];
        /** @description Page number */
        page?: number;
        /** @description Page size */
        size?: number;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["Page_Entity_"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Create Entity
   * @description Create a new entity
   */
  create_entity: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["EntityCreate"];
      };
    };
    responses: {
      /** @description Successful Response */
      201: {
        content: {
          "application/json": components["schemas"]["Entity"];
        };
      };
      /** @description Conflict Error */
      409: {
        content: never;
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /** Get Entity Sources */
  get_entity_sources: {
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": (string | null)[];
        };
      };
    };
  };
  /**
   * Get Entity
   * @description Get a single entity by id
   */
  get_entity: {
    parameters: {
      path: {
        entity_id: number;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["Entity"];
        };
      };
      /** @description Entity not found */
      404: {
        content: never;
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /** Delete Entity */
  delete_entity: {
    parameters: {
      path: {
        entity_id: number;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": unknown;
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /** Update Entity */
  update_entity: {
    parameters: {
      path: {
        entity_id: number;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["EntityUpdate"];
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["Entity"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Create Entity From Json
   * @description Create a new entity
   */
  create_entity_from_json: {
    requestBody: {
      content: {
        "multipart/form-data": components["schemas"]["Body_create_entity_from_json"];
      };
    };
    responses: {
      /** @description Successful Response */
      201: {
        content: {
          "application/json": unknown;
        };
      };
      /** @description Conflict Error */
      409: {
        content: never;
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * List Participants
   * @description Get all participants
   */
  list_participants: {
    parameters: {
      query?: {
        /** @description Page number */
        page?: number;
        /** @description Page size */
        size?: number;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["Page_Participant_"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Create Participant
   * @description Create a new participant
   */
  create_participant: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["ParticipantCreate"];
      };
    };
    responses: {
      /** @description Successful Response */
      201: {
        content: {
          "application/json": components["schemas"]["Participant"];
        };
      };
      /** @description Conflict Error */
      409: {
        content: never;
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Get Participant
   * @description Get a single participant by id
   */
  get_participant: {
    parameters: {
      path: {
        participant_id: number;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["Participant"];
        };
      };
      /** @description Participant not found */
      404: {
        content: never;
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /** Delete Participant */
  delete_participant: {
    parameters: {
      path: {
        participant_id: number;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": unknown;
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /** Update Participant */
  update_participant: {
    parameters: {
      path: {
        participant_id: number;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["ParticipantUpdate"];
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["Participant"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * List Combats
   * @description Get all combats
   */
  list_combats: {
    parameters: {
      query?: {
        title?: string | null;
        combat_participants_at_least?: number | null;
        combat_participants_at_most?: number | null;
        combat_participants_name?: string | null;
        sort_by?: "title" | "num_participants" | null;
        sort_dir?: components["schemas"]["SortOption"];
        /** @description Page number */
        page?: number;
        /** @description Page size */
        size?: number;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["Page_Combat_"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Create Combat
   * @description Create a new combat
   */
  create_combat: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["CombatCreate"];
      };
    };
    responses: {
      /** @description Successful Response */
      201: {
        content: {
          "application/json": components["schemas"]["Combat"];
        };
      };
      /** @description Conflict Error */
      409: {
        content: never;
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Get Combat
   * @description Get a single combat by id
   */
  get_combat: {
    parameters: {
      path: {
        combat_id: number;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["Combat"];
        };
      };
      /** @description Combat not found */
      404: {
        content: never;
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /** Delete Combat */
  delete_combat: {
    parameters: {
      path: {
        combat_id: number;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": unknown;
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /** Update Combat */
  update_combat: {
    parameters: {
      path: {
        combat_id: number;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["CombatUpdate"];
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["Combat"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /** Add Participant To Combat */
  add_participant_to_combat: {
    parameters: {
      path: {
        combat_id: number;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["ParticipantCreate"][];
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["Combat"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /** Remove Participant From Combat */
  remove_participant_from_combat: {
    parameters: {
      query: {
        participant_id: number;
      };
      path: {
        combat_id: number;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["Combat"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * List Rolltables
   * @description Get all rolltables
   */
  list_rolltables: {
    parameters: {
      query?: {
        /** @description Page number */
        page?: number;
        /** @description Page size */
        size?: number;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["Page_RollTable_"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Create Rolltable
   * @description Create a new rolltable
   */
  create_rolltable: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["RollTableBase"];
      };
    };
    responses: {
      /** @description Successful Response */
      201: {
        content: {
          "application/json": components["schemas"]["RollTable"];
        };
      };
      /** @description Conflict Error */
      409: {
        content: never;
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Get Rolltable
   * @description Get a single rolltable by id
   */
  get_rolltable: {
    parameters: {
      path: {
        rolltable_id: number;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["RollTable"];
        };
      };
      /** @description RollTable not found */
      404: {
        content: never;
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /** Delete Rolltable */
  delete_rolltable: {
    parameters: {
      path: {
        rolltable_id: number;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": unknown;
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /** Update Rolltable */
  update_rolltable: {
    parameters: {
      path: {
        rolltable_id: number;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["RollTableUpdate"];
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["RollTable"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * List Messages
   * @description Get all messages
   */
  list_messages: {
    parameters: {
      query?: {
        message?: string | null;
        sort_by?: "message" | null;
        sort_dir?: components["schemas"]["SortOption"];
        /** @description Page number */
        page?: number;
        /** @description Page size */
        size?: number;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["Page_Message_"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Create Message
   * @description Create a new message
   */
  create_message: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["MessageCreate"];
      };
    };
    responses: {
      /** @description Successful Response */
      201: {
        content: {
          "application/json": components["schemas"]["Message"];
        };
      };
      /** @description Conflict Error */
      409: {
        content: never;
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Get Random Messages
   * @description Get all messages
   */
  get_random_messages: {
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["Message"];
        };
      };
    };
  };
  /**
   * Get Message
   * @description Get a single message by id
   */
  get_message: {
    parameters: {
      path: {
        message_id: number;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["Message"];
        };
      };
      /** @description Message not found */
      404: {
        content: never;
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /** Delete Message */
  delete_message: {
    parameters: {
      path: {
        message_id: number;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": unknown;
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /** Update Message */
  update_message: {
    parameters: {
      path: {
        message_id: number;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["MessageUpdate"];
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["Message"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * List Images
   * @description Get all images
   */
  list_images: {
    parameters: {
      query?: {
        name?: string | null;
        type?: components["schemas"]["ImageType"] | null;
        types?: string | null;
        sort_by?: string | null;
        sort_dir?: components["schemas"]["SortOption"];
        /** @description Page number */
        page?: number;
        /** @description Page size */
        size?: number;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["Page_ImageURL_"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Create Image
   * @description Create a new image
   */
  create_image: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["ImageCreate"];
      };
    };
    responses: {
      /** @description Successful Response */
      201: {
        content: {
          "application/json": components["schemas"]["Image"];
        };
      };
      /** @description Conflict Error */
      409: {
        content: never;
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /** Get Image Tag Matches */
  get_image_tag_matches: {
    parameters: {
      query: {
        taglist: number[];
        name?: string | null;
        type?: components["schemas"]["ImageType"] | null;
        types?: string | null;
        /** @description Page number */
        page?: number;
        /** @description Page size */
        size?: number;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["Page_ImageURL_"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Get Random Image
   * @description Get a single random image
   */
  get_random_image: {
    parameters: {
      query: {
        image_type: components["schemas"]["ImageType"];
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["ImageURL"];
        };
      };
      /** @description Image not found */
      404: {
        content: never;
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Get Image
   * @description Get a single image by id
   */
  get_image: {
    parameters: {
      path: {
        image_id: number;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["ImageURL"];
        };
      };
      /** @description Image not found */
      404: {
        content: never;
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /** Delete Image */
  delete_image: {
    parameters: {
      path: {
        image_id: number;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": unknown;
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /** Update Image */
  update_image: {
    parameters: {
      path: {
        image_id: number;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["ImageUpdate"];
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["Image"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /** Upload Image */
  upload_image: {
    requestBody: {
      content: {
        "multipart/form-data": components["schemas"]["Body_upload_image"];
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["ImageURL"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /** Set Tags */
  set_tags: {
    parameters: {
      path: {
        image_id: number;
      };
    };
    requestBody: {
      content: {
        "application/json": number[];
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["Image"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /** Remove Tag */
  remove_tag: {
    parameters: {
      query: {
        tag_id: number;
      };
      path: {
        image_id: number;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["Image"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /** Apply Tag */
  apply_tag: {
    parameters: {
      query: {
        tag_id: number;
      };
      path: {
        image_id: number;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["Image"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /** Get Full Image */
  get_full_image: {
    parameters: {
      path: {
        image_id: number;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: never;
      };
      /** @description Image not found */
      404: {
        content: never;
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /** Get Image Thumbnail */
  get_image_thumbnail: {
    parameters: {
      query?: {
        width?: number | null;
        height?: number | null;
        scale?: number | null;
      };
      path: {
        image_id: number;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: never;
      };
      /** @description Image not found */
      404: {
        content: never;
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /** Get Image As Base64 */
  get_image_as_base64: {
    parameters: {
      path: {
        image_id: number;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["ImageB64"];
        };
      };
      /** @description Image not found */
      404: {
        content: never;
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /** Remove From Collection */
  remove_from_collection: {
    parameters: {
      query: {
        collection_id: number;
      };
      path: {
        image_id: number;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["Image"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /** Add To Collection */
  add_to_collection: {
    parameters: {
      query: {
        collection_id: number;
      };
      path: {
        image_id: number;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["Image"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * List Tags
   * @description Get all tags
   */
  list_tags: {
    parameters: {
      query?: {
        tag?: string | null;
        /** @description Page number */
        page?: number;
        /** @description Page size */
        size?: number;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["Page_Tag_"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Create Tag
   * @description Create a new tag
   */
  create_tag: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["TagCreate"];
      };
    };
    responses: {
      /** @description Successful Response */
      201: {
        content: {
          "application/json": components["schemas"]["Tag"];
        };
      };
      /** @description Conflict Error */
      409: {
        content: never;
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /** Get Orphan Tags */
  get_orphan_tags: {
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["Tag"][];
        };
      };
    };
  };
  /**
   * Get Tag
   * @description Get a single tag by id
   */
  get_tag: {
    parameters: {
      path: {
        tag_id: number;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["Tag"];
        };
      };
      /** @description Tag not found */
      404: {
        content: never;
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /** Delete Tag */
  delete_tag: {
    parameters: {
      path: {
        tag_id: number;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": unknown;
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /** Update Tag */
  update_tag: {
    parameters: {
      path: {
        tag_id: number;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["TagUpdate"];
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["Tag"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /** Merge Tags */
  merge_tags: {
    parameters: {
      path: {
        tag_id: number;
        tag2_id: number;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": unknown;
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * List Collections
   * @description Get all collections
   */
  list_collections: {
    parameters: {
      query?: {
        name?: string | null;
        /** @description Page number */
        page?: number;
        /** @description Page size */
        size?: number;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["Page_Collection_"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Create Collection
   * @description Create a new collection
   */
  create_collection: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["CollectionCreate"];
      };
    };
    responses: {
      /** @description Successful Response */
      201: {
        content: {
          "application/json": components["schemas"]["Collection"];
        };
      };
      /** @description Conflict Error */
      409: {
        content: never;
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /** Get Empty Collections */
  get_empty_collections: {
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["Collection"][];
        };
      };
    };
  };
  /**
   * Get Collection
   * @description Get a single collection by id
   */
  get_collection: {
    parameters: {
      path: {
        collection_id: number;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["Collection"];
        };
      };
      /** @description Collection not found */
      404: {
        content: never;
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /** Delete Collection */
  delete_collection: {
    parameters: {
      path: {
        collection_id: number;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": unknown;
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /** Update Collection */
  update_collection: {
    parameters: {
      path: {
        collection_id: number;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["CollectionUpdate"];
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["Collection"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /** Index */
  index: {
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "text/html": string;
        };
      };
    };
  };
}
